<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://meetabug.github.io</id>
    <title>Meetabug</title>
    <updated>2020-08-02T07:39:14.748Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://meetabug.github.io"/>
    <link rel="self" href="https://meetabug.github.io/atom.xml"/>
    <logo>https://meetabug.github.io/images/avatar.png</logo>
    <icon>https://meetabug.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Meetabug</rights>
    <entry>
        <title type="html"><![CDATA[Git常用命令]]></title>
        <id>https://meetabug.github.io/post/git-chang-yong-ming-ling/</id>
        <link href="https://meetabug.github.io/post/git-chang-yong-ming-ling/">
        </link>
        <updated>2020-08-02T07:14:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="流程图">流程图</h2>
<figure data-type="image" tabindex="1"><img src="https://meetabug.github.io/post-images/1596352514127.png" alt="" loading="lazy"></figure>
<h2 id="名词">名词</h2>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h2 id="新建代码库">新建代码库</h2>
<pre><code>
# 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
</code></pre>
<h2 id="配置">配置</h2>
<blockquote>
<p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
</blockquote>
<pre><code># 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
</code></pre>
<h2 id="增加删除文件">增加/删除文件</h2>
<pre><code># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed
</code></pre>
<h2 id="代码提交">代码提交</h2>
<pre><code># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre>
<h2 id="分支">分支</h2>
<pre><code># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre>
<h2 id="标签">标签</h2>
<pre><code># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
</code></pre>
<h2 id="查看信息">查看信息</h2>
<pre><code>
# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
</code></pre>
<h2 id="远程同步">远程同步</h2>
<pre><code># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre>
<h2 id="撤销">撤销</h2>
<pre><code># 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
</code></pre>
<h2 id="其他">其他</h2>
<pre><code># 生成一个可供发布的压缩包
$ git archive
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL查询结果按where in数组排序]]></title>
        <id>https://meetabug.github.io/post/mysql-cha-xun-jie-guo-an-where-in-shu-zu-pai-xu/</id>
        <link href="https://meetabug.github.io/post/mysql-cha-xun-jie-guo-an-where-in-shu-zu-pai-xu/">
        </link>
        <updated>2020-08-02T07:07:43.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>在查询中，MySQL默认是order by id asc排序的，但有时候需要按照where in 的数组顺序排序，比如where in的id查询数组为[922,106,104,103],正常情况查询出来的结果顺序为[103,104,106,922],这可能不是我们想要的结果，我们期望查出来的结果顺序与where in的顺序一致，这里介绍两个方式：</p>
</blockquote>
<ul>
<li>使用find_in_set函数:</li>
</ul>
<pre><code>select * from table where id in (922,106,104,103) order by find_in_set(id,'922,106,104,103');
</code></pre>
<ul>
<li>使用order by field</li>
</ul>
<pre><code>select * from table where id in (922,106,104,103) order by field(id,922,106,104,103);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql 规范设计]]></title>
        <id>https://meetabug.github.io/post/mysql-gui-fan-she-ji/</id>
        <link href="https://meetabug.github.io/post/mysql-gui-fan-she-ji/">
        </link>
        <updated>2020-08-01T15:41:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="配置规范">配置规范</h2>
<ul>
<li>
<p>MySQL数据库默认使用InnoDB存储引擎。</p>
</li>
<li>
<p>保证字符集设置统一，MySQL数据库相关系统、数据库、表的字符集使都用UTF8，应用程序连接、展示等可以设置字符集的地方也都统一设置为UTF8字符集。</p>
</li>
</ul>
<blockquote>
<p>注：UTF8格式是存储不了表情类数据，需要使用UTF8MB4，可在MySQL字符集里面设置。在8.0中已经默认为UTF8MB4，可以根据公司的业务情况进行统一或者定制化设置。</p>
</blockquote>
<ul>
<li>
<p>MySQL数据库的事务隔离级别默认为RR（Repeatable-Read），建议初始化时统一设置为RC（Read-Committed）。</p>
</li>
<li>
<p>数据库中的表要合理规划，控制单表数据量，对于MySQL数据库来说，建议单表记录数控制在2000W以内。</p>
</li>
<li>
<p>MySQL实例下，数据库、表数量尽可能少；数据库一般不超过50个，每个数据库下，数据表数量一般不超过500个（包括分区表）。</p>
</li>
</ul>
<h2 id="建表规范">建表规范</h2>
<ul>
<li>
<p>InnoDB禁止使用外键约束，可以通过程序层面保证。</p>
</li>
<li>
<p>存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE。</p>
</li>
<li>
<p>整型定义中无需定义显示宽度，比如：使用INT，而不是INT(4)。</p>
</li>
<li>
<p>不建议使用ENUM类型，可使用TINYINT来代替。</p>
</li>
<li>
<p>尽可能不使用TEXT、BLOB类型，如果必须使用，建议将过大字段或是不常用的描述型较大字段拆分到其他表中；另外，禁止用数据库存储图片或文件。</p>
</li>
<li>
<p>存储年时使用YEAR(4)，不使用YEAR(2)。</p>
</li>
<li>
<p>建议字段定义为NOT NULL。</p>
</li>
</ul>
<h2 id="命名规范">命名规范</h2>
<ul>
<li>
<p>库、表、字段全部采用小写。</p>
</li>
<li>
<p>库名、表名、字段名、索引名称均使用小写字母，并以“_”分割。</p>
</li>
<li>
<p>库名、表名、字段名建议不超过12个字符。（库名、表名、字段名支持最多64个字符，但为了统一规范、易于辨识以及减少传输量，统一不超过12字符）</p>
</li>
<li>
<p>库名、表名、字段名见名知意，不需要添加注释。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>对象中文名称</th>
<th>对象英文全称</th>
<th>MySQL对象简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>视图</td>
<td>view</td>
<td>view_</td>
</tr>
<tr>
<td>函数</td>
<td>function</td>
<td>func_</td>
</tr>
<tr>
<td>存储过程</td>
<td>procedure</td>
<td>proc_</td>
</tr>
<tr>
<td>触发器</td>
<td>trigger</td>
<td>trig_</td>
</tr>
<tr>
<td>普通索引</td>
<td>index</td>
<td>idx_</td>
</tr>
<tr>
<td>唯一索引</td>
<td>unique index</td>
<td>uniq_</td>
</tr>
<tr>
<td>主键索引</td>
<td>primary key</td>
<td>pk_</td>
</tr>
</tbody>
</table>
<h2 id="索引规范">索引规范</h2>
<ul>
<li>
<p>索引建议命名规则：idx_col1_col2[_colN]、uniq_col1_col2[_colN]（如果字段过长建议采用缩写）。</p>
</li>
<li>
<p>索引中的字段数建议不超过5个。</p>
</li>
<li>
<p>单张表的索引个数控制在5个以内。</p>
</li>
<li>
<p>InnoDB表一般都建议有主键列，尤其在高可用集群方案中是作为必须项的。</p>
</li>
<li>
<p>建立复合索引时，优先将选择性高的字段放在前面。</p>
</li>
<li>
<p>UPDATE、DELETE语句需要根据WHERE条件添加索引。</p>
</li>
<li>
<p>不建议使用%前缀模糊查询，例如LIKE “%weibo”，无法用到索引，会导致全表扫描。</p>
</li>
<li>
<p>合理利用组合索引，例如：SELECT email,uid FROM user_email WHERE uid=xx，如果uid不是主键，可以创建组合索引idx_uid_email(uid,email)来提高查询效率。</p>
</li>
<li>
<p>避免在索引字段上使用函数，否则会导致查询时索引失效。</p>
</li>
</ul>
<h2 id="应用规范">应用规范</h2>
<ul>
<li>
<p>避免使用存储过程、触发器、自定义函数等，容易将业务逻辑和DB耦合在一起，后期做分布式方案时会成为瓶颈。</p>
</li>
<li>
<p>考虑使用UNION ALL，减少使用UNION，因为UNION ALL不去重，而少了排序操作，速度相对比UNION要快，如果没有去重的需求，优先使用UNION ALL。</p>
</li>
<li>
<p>考虑使用limit N，少用limit M，N，特别是大表或M比较大的时候。</p>
</li>
<li>
<p>减少或避免排序，如：group by语句中如果不需要排序，可以增加order by null。</p>
</li>
<li>
<p>统计表中记录数时使用COUNT(<em>)，而不是COUNT(primary_key)和COUNT(1)；InnoDB表避免使用COUNT(</em>)操作，计数统计实时要求较强可以使用Memcache或者Redis，非实时统计可以使用单独统计表，定时更新。</p>
</li>
<li>
<p>做字段变更操作（modify column/change column）的时候必须加上原有的注释属性，否则修改后，注释会丢失。</p>
</li>
<li>
<p>使用prepared statement可以提高性能并且避免SQL注入。</p>
</li>
<li>
<p>SQL语句中IN包含的值不应过多。</p>
</li>
<li>
<p>UPDATE、DELETE语句一定要有明确的WHERE条件。</p>
</li>
<li>
<p>WHERE条件中的字段值需要符合该字段的数据类型，避免MySQL进行隐式类型转化。</p>
</li>
<li>
<p>SELECT、INSERT语句必须显式的指明字段名称，禁止使用SELECT * 或是INSERT INTO table_name values()。</p>
</li>
<li>
<p>INSERT语句使用batch提交（INSERT INTO table_name VALUES(),(),()……），values的个数不应过多</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL Cheat Sheet - SQL 速查手册]]></title>
        <id>https://meetabug.github.io/post/sql-cheat-sheet-sql-su-cha-shou-ce/</id>
        <link href="https://meetabug.github.io/post/sql-cheat-sheet-sql-su-cha-shou-ce/">
        </link>
        <updated>2020-08-01T15:34:43.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://meetabug.github.io/post-images/1596296166698.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP 状态码]]></title>
        <id>https://meetabug.github.io/post/http-zhuang-tai-ma/</id>
        <link href="https://meetabug.github.io/post/http-zhuang-tai-ma/">
        </link>
        <updated>2020-08-01T14:30:18.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>Type</th>
<th>Reson-phrase(原因短语)</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr>
<td>1XX</td>
<td>Informational</td>
<td>信息性状态码，表示接受的请求正在处理</td>
</tr>
<tr>
<td>2XX</td>
<td>Success</td>
<td>成功状态码，表示请求正常处理完毕</td>
</tr>
<tr>
<td>3XX</td>
<td>Redirection</td>
<td>重定向状态码，表示需要客户端需要进行附加操作</td>
</tr>
<tr>
<td>4XX</td>
<td>Client Error</td>
<td>客户端错误状态码，表示服务器无法处理请求</td>
</tr>
<tr>
<td>5XX</td>
<td>Server Error</td>
<td>服务器错误状态码，表示服务器处理请求出错</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码英文名称</th>
<th>中文描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td>Continue</td>
<td>继续。客户端应继续其请求</td>
</tr>
<tr>
<td>101</td>
<td>Switching Protocols</td>
<td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td>
</tr>
<tr>
<td>200</td>
<td>OK</td>
<td>请求成功。一般用于GET与POST请求</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td>已创建。成功请求并创建了新的资源</td>
</tr>
<tr>
<td>202</td>
<td>Accepted</td>
<td>已接受。已经接受请求，但未处理完成</td>
</tr>
<tr>
<td>203</td>
<td>Non-Authoritative Information</td>
<td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td>
</tr>
<tr>
<td>205</td>
<td>Reset Content</td>
<td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td>
</tr>
<tr>
<td>206</td>
<td>Partial Content</td>
<td>部分内容。服务器成功处理了部分GET请求</td>
</tr>
<tr>
<td>300</td>
<td>Multiple Choices</td>
<td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td>
</tr>
<tr>
<td>301</td>
<td>Moved Permanently</td>
<td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td>
</tr>
<tr>
<td>302</td>
<td>Found</td>
<td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td>
</tr>
<tr>
<td>303</td>
<td>See Other</td>
<td>查看其它地址。与301类似。使用GET和POST请求查看</td>
</tr>
<tr>
<td>304</td>
<td>Not Modified</td>
<td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td>
</tr>
<tr>
<td>305</td>
<td>Use Proxy</td>
<td>使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td>306</td>
<td>Unused</td>
<td>已经被废弃的HTTP状态码</td>
</tr>
<tr>
<td>307</td>
<td>Temporary Redirect</td>
<td>临时重定向。与302类似。使用GET请求重定向</td>
</tr>
<tr>
<td>400</td>
<td>Bad Request</td>
<td>客户端请求的语法错误，服务器无法理解</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td>请求要求用户的身份认证</td>
</tr>
<tr>
<td>402</td>
<td>Payment Required</td>
<td>保留，将来使用</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed</td>
<td>客户端请求中的方法被禁止</td>
</tr>
<tr>
<td>406</td>
<td>Not Acceptable</td>
<td>服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td>407</td>
<td>Proxy Authentication Required</td>
<td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td>408</td>
<td>Request Time-out</td>
<td>服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td>409</td>
<td>Conflict</td>
<td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td>410</td>
<td>Gone</td>
<td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410 代码，网站设计人员可通过301代码指定资源的新位置</td>
</tr>
<tr>
<td>411</td>
<td>Length Required</td>
<td>服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td>412</td>
<td>Precondition Failed</td>
<td>客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td>413</td>
<td>Request Entity Too Large</td>
<td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td>
</tr>
<tr>
<td>414</td>
<td>Request-URI Too Large</td>
<td>请求的URI过长（URI通常为网址），服务器无法处理</td>
</tr>
<tr>
<td>415</td>
<td>Unsupported Media Type</td>
<td>服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td>416</td>
<td>Requested range not satisfiable</td>
<td>客户端请求的范围无效</td>
</tr>
<tr>
<td>417</td>
<td>Expectation Failed</td>
<td>服务器无法满足Expect的请求头信息</td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td>501</td>
<td>Not Implemented</td>
<td>服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td>502</td>
<td>Bad Gateway</td>
<td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>
</tr>
<tr>
<td>503</td>
<td>Service Unavailable</td>
<td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td>
</tr>
<tr>
<td>504</td>
<td>Gateway Time-out</td>
<td>充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td>505</td>
<td>HTTP Version not supported</td>
<td>服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Composer常用命令]]></title>
        <id>https://meetabug.github.io/post/composer-chang-yong-ming-ling/</id>
        <link href="https://meetabug.github.io/post/composer-chang-yong-ming-ling/">
        </link>
        <updated>2020-07-30T13:35:59.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>搜索包</li>
</ul>
<pre><code>composer search
</code></pre>
<ul>
<li>包的安装</li>
</ul>
<pre><code>composer require
composer install
</code></pre>
<p>安装后会产生两个文件和一个文件夹，如下：</p>
<p>composer.json 是包的依赖文件；</p>
<p>composer.lock 是包的版本锁定文件；</p>
<p>vendor 是包的所在目录；</p>
<p>对于 require 和 install 是不相同的，require 会把包的信息添加到 composer.json 文件中并进行 install 。而 install 是直接从 composer.json 或 composer.lock 文件中提取依赖信息，然后进行安装。</p>
<ul>
<li>更新包</li>
</ul>
<pre><code>composer update
</code></pre>
<ul>
<li>删除包</li>
</ul>
<pre><code>composer remove
</code></pre>
<ul>
<li>依赖打包</li>
</ul>
<blockquote>
<p>如果项目中安装了不止一个包，可能安装了很多个项目依赖的包，需要对项目中的包依赖进行一个打包处理成为一个压缩文件。</p>
</blockquote>
<pre><code>composer archive
</code></pre>
<ul>
<li>生成类库映射文件</li>
</ul>
<pre><code>composer dump-autoload
</code></pre>
<ul>
<li>创建项目</li>
</ul>
<pre><code>composer create-project
</code></pre>
<ul>
<li>更新composer</li>
</ul>
<pre><code>composer self-update
</code></pre>
<ul>
<li>初始化</li>
</ul>
<blockquote>
<p>以交互方式填写composer.json文件信息</p>
</blockquote>
<pre><code>composer init 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vagrant 常用命令]]></title>
        <id>https://meetabug.github.io/post/vagrant-chang-yong-ming-ling/</id>
        <link href="https://meetabug.github.io/post/vagrant-chang-yong-ming-ling/">
        </link>
        <updated>2020-07-30T13:15:49.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>vagrant init</td>
<td>初始化</td>
</tr>
<tr>
<td>vagrant up</td>
<td>启动虚拟机</td>
</tr>
<tr>
<td>vagrant halt</td>
<td>关闭虚拟机</td>
</tr>
<tr>
<td>vagrant reload {--provision}</td>
<td>重启虚拟机</td>
</tr>
<tr>
<td>vagrant ssh</td>
<td>SSH 至虚拟机</td>
</tr>
<tr>
<td>vagrant status</td>
<td>查看虚拟机运行状态</td>
</tr>
<tr>
<td>vagrant destroy</td>
<td>销毁当前虚拟机</td>
</tr>
<tr>
<td>vagrant suspend</td>
<td>挂起虚拟机</td>
</tr>
<tr>
<td>vagrant resume</td>
<td>恢复被挂起的虚拟机</td>
</tr>
<tr>
<td>vagrant box list</td>
<td>列出所有box列表</td>
</tr>
<tr>
<td>vagrant box remove {base name}</td>
<td>删除box</td>
</tr>
<tr>
<td>vagrant package</td>
<td>把当前运行的虚拟机环境进行打包，可用于分发开发环境</td>
</tr>
<tr>
<td>vagrant plugin</td>
<td>安装/卸载插件</td>
</tr>
<tr>
<td>vagrant provision</td>
<td>设置基本的环境，进一步设置可以使用Chef/Puppet进行搭建</td>
</tr>
<tr>
<td>vagrant ssh-config</td>
<td>输出SSH 连接的一些信息</td>
</tr>
<tr>
<td>vagrant vsersion</td>
<td>获取Vagrant的版本</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://meetabug.github.io/post/hello-gridea/</id>
        <link href="https://meetabug.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>