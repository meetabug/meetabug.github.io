<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://meetabug.github.io</id>
    <title>Meetabug</title>
    <updated>2020-08-01T15:36:30.351Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://meetabug.github.io"/>
    <link rel="self" href="https://meetabug.github.io/atom.xml"/>
    <logo>https://meetabug.github.io/images/avatar.png</logo>
    <icon>https://meetabug.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Meetabug</rights>
    <entry>
        <title type="html"><![CDATA[SQL Cheat Sheet - SQL 速查手册]]></title>
        <id>https://meetabug.github.io/post/sql-cheat-sheet-sql-su-cha-shou-ce/</id>
        <link href="https://meetabug.github.io/post/sql-cheat-sheet-sql-su-cha-shou-ce/">
        </link>
        <updated>2020-08-01T15:34:43.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://meetabug.github.io/post-images/1596296166698.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP 状态码]]></title>
        <id>https://meetabug.github.io/post/http-zhuang-tai-ma/</id>
        <link href="https://meetabug.github.io/post/http-zhuang-tai-ma/">
        </link>
        <updated>2020-08-01T14:30:18.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>Type</th>
<th>Reson-phrase(原因短语)</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr>
<td>1XX</td>
<td>Informational</td>
<td>信息性状态码，表示接受的请求正在处理</td>
</tr>
<tr>
<td>2XX</td>
<td>Success</td>
<td>成功状态码，表示请求正常处理完毕</td>
</tr>
<tr>
<td>3XX</td>
<td>Redirection</td>
<td>重定向状态码，表示需要客户端需要进行附加操作</td>
</tr>
<tr>
<td>4XX</td>
<td>Client Error</td>
<td>客户端错误状态码，表示服务器无法处理请求</td>
</tr>
<tr>
<td>5XX</td>
<td>Server Error</td>
<td>服务器错误状态码，表示服务器处理请求出错</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码英文名称</th>
<th>中文描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td>Continue</td>
<td>继续。客户端应继续其请求</td>
</tr>
<tr>
<td>101</td>
<td>Switching Protocols</td>
<td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td>
</tr>
<tr>
<td>200</td>
<td>OK</td>
<td>请求成功。一般用于GET与POST请求</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td>已创建。成功请求并创建了新的资源</td>
</tr>
<tr>
<td>202</td>
<td>Accepted</td>
<td>已接受。已经接受请求，但未处理完成</td>
</tr>
<tr>
<td>203</td>
<td>Non-Authoritative Information</td>
<td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td>
</tr>
<tr>
<td>205</td>
<td>Reset Content</td>
<td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td>
</tr>
<tr>
<td>206</td>
<td>Partial Content</td>
<td>部分内容。服务器成功处理了部分GET请求</td>
</tr>
<tr>
<td>300</td>
<td>Multiple Choices</td>
<td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td>
</tr>
<tr>
<td>301</td>
<td>Moved Permanently</td>
<td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td>
</tr>
<tr>
<td>302</td>
<td>Found</td>
<td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td>
</tr>
<tr>
<td>303</td>
<td>See Other</td>
<td>查看其它地址。与301类似。使用GET和POST请求查看</td>
</tr>
<tr>
<td>304</td>
<td>Not Modified</td>
<td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td>
</tr>
<tr>
<td>305</td>
<td>Use Proxy</td>
<td>使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td>306</td>
<td>Unused</td>
<td>已经被废弃的HTTP状态码</td>
</tr>
<tr>
<td>307</td>
<td>Temporary Redirect</td>
<td>临时重定向。与302类似。使用GET请求重定向</td>
</tr>
<tr>
<td>400</td>
<td>Bad Request</td>
<td>客户端请求的语法错误，服务器无法理解</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td>请求要求用户的身份认证</td>
</tr>
<tr>
<td>402</td>
<td>Payment Required</td>
<td>保留，将来使用</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed</td>
<td>客户端请求中的方法被禁止</td>
</tr>
<tr>
<td>406</td>
<td>Not Acceptable</td>
<td>服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td>407</td>
<td>Proxy Authentication Required</td>
<td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td>408</td>
<td>Request Time-out</td>
<td>服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td>409</td>
<td>Conflict</td>
<td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td>410</td>
<td>Gone</td>
<td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410 代码，网站设计人员可通过301代码指定资源的新位置</td>
</tr>
<tr>
<td>411</td>
<td>Length Required</td>
<td>服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td>412</td>
<td>Precondition Failed</td>
<td>客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td>413</td>
<td>Request Entity Too Large</td>
<td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td>
</tr>
<tr>
<td>414</td>
<td>Request-URI Too Large</td>
<td>请求的URI过长（URI通常为网址），服务器无法处理</td>
</tr>
<tr>
<td>415</td>
<td>Unsupported Media Type</td>
<td>服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td>416</td>
<td>Requested range not satisfiable</td>
<td>客户端请求的范围无效</td>
</tr>
<tr>
<td>417</td>
<td>Expectation Failed</td>
<td>服务器无法满足Expect的请求头信息</td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td>501</td>
<td>Not Implemented</td>
<td>服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td>502</td>
<td>Bad Gateway</td>
<td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>
</tr>
<tr>
<td>503</td>
<td>Service Unavailable</td>
<td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td>
</tr>
<tr>
<td>504</td>
<td>Gateway Time-out</td>
<td>充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td>505</td>
<td>HTTP Version not supported</td>
<td>服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Composer常用命令]]></title>
        <id>https://meetabug.github.io/post/composer-chang-yong-ming-ling/</id>
        <link href="https://meetabug.github.io/post/composer-chang-yong-ming-ling/">
        </link>
        <updated>2020-07-30T13:35:59.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>搜索包</li>
</ul>
<pre><code>composer search
</code></pre>
<ul>
<li>包的安装</li>
</ul>
<pre><code>composer require
composer install
</code></pre>
<p>安装后会产生两个文件和一个文件夹，如下：</p>
<p>composer.json 是包的依赖文件；</p>
<p>composer.lock 是包的版本锁定文件；</p>
<p>vendor 是包的所在目录；</p>
<p>对于 require 和 install 是不相同的，require 会把包的信息添加到 composer.json 文件中并进行 install 。而 install 是直接从 composer.json 或 composer.lock 文件中提取依赖信息，然后进行安装。</p>
<ul>
<li>更新包</li>
</ul>
<pre><code>composer update
</code></pre>
<ul>
<li>删除包</li>
</ul>
<pre><code>composer remove
</code></pre>
<ul>
<li>依赖打包</li>
</ul>
<blockquote>
<p>如果项目中安装了不止一个包，可能安装了很多个项目依赖的包，需要对项目中的包依赖进行一个打包处理成为一个压缩文件。</p>
</blockquote>
<pre><code>composer archive
</code></pre>
<ul>
<li>生成类库映射文件</li>
</ul>
<pre><code>composer dump-autoload
</code></pre>
<ul>
<li>创建项目</li>
</ul>
<pre><code>composer create-project
</code></pre>
<ul>
<li>更新composer</li>
</ul>
<pre><code>composer self-update
</code></pre>
<ul>
<li>初始化</li>
</ul>
<blockquote>
<p>以交互方式填写composer.json文件信息</p>
</blockquote>
<pre><code>composer init 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vagrant 常用命令]]></title>
        <id>https://meetabug.github.io/post/vagrant-chang-yong-ming-ling/</id>
        <link href="https://meetabug.github.io/post/vagrant-chang-yong-ming-ling/">
        </link>
        <updated>2020-07-30T13:15:49.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>vagrant init</td>
<td>初始化</td>
</tr>
<tr>
<td>vagrant up</td>
<td>启动虚拟机</td>
</tr>
<tr>
<td>vagrant halt</td>
<td>关闭虚拟机</td>
</tr>
<tr>
<td>vagrant reload {--provision}</td>
<td>重启虚拟机</td>
</tr>
<tr>
<td>vagrant ssh</td>
<td>SSH 至虚拟机</td>
</tr>
<tr>
<td>vagrant status</td>
<td>查看虚拟机运行状态</td>
</tr>
<tr>
<td>vagrant destroy</td>
<td>销毁当前虚拟机</td>
</tr>
<tr>
<td>vagrant suspend</td>
<td>挂起虚拟机</td>
</tr>
<tr>
<td>vagrant resume</td>
<td>恢复被挂起的虚拟机</td>
</tr>
<tr>
<td>vagrant box list</td>
<td>列出所有box列表</td>
</tr>
<tr>
<td>vagrant box remove {base name}</td>
<td>删除box</td>
</tr>
<tr>
<td>vagrant package</td>
<td>把当前运行的虚拟机环境进行打包，可用于分发开发环境</td>
</tr>
<tr>
<td>vagrant plugin</td>
<td>安装/卸载插件</td>
</tr>
<tr>
<td>vagrant provision</td>
<td>设置基本的环境，进一步设置可以使用Chef/Puppet进行搭建</td>
</tr>
<tr>
<td>vagrant ssh-config</td>
<td>输出SSH 连接的一些信息</td>
</tr>
<tr>
<td>vagrant vsersion</td>
<td>获取Vagrant的版本</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://meetabug.github.io/post/hello-gridea/</id>
        <link href="https://meetabug.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>